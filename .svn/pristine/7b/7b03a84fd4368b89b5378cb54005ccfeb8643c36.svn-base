package com.koreait.app.boards;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.koreait.action.ActionForward;

public class BoardsFrontController extends HttpServlet{
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		doProcess(req, resp);
	}
	
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		doProcess(req, resp);
	}
	
	protected void doProcess(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException{
		String requestURI = req.getRequestURI();
		String contextPath = req.getContextPath();
		String command = requestURI.substring(contextPath.length());
		ActionForward forward = null;
		
		System.out.println("check");
		switch(command) {
		//BoardList 분기처리
		case "/boards/BoardsList.bo":
			switch (req.getParameter("type")) {
			//노하우 게시판
			case "1":
				//execute : db를 갔다오거나, 연산이 필요한 경우 사용, 페이지 이동
				try {forward = new KnowhowListOkAction().execute(req, resp);} catch (Exception e) {System.out.println(e);}
				break;
			//남편 게시판
			case "2":
				try {forward = new HusbandListOkAction().execute(req, resp);} catch (Exception e) {System.out.println(e);}
				break;
			//중고 게시판
			case "3":
				try {forward = new SecondhandListOkAction().execute(req, resp);} catch (Exception e) {System.out.println(e);}
				break;
			}
			break;
		case "/boards/BoardsWrite.bo"://글쓰기 게시판으로 이동
			switch (req.getParameter("type")) {
			//노하우 게시판
			case "1":
				forward = new ActionForward();
				forward.setRedirect(false);
				forward.setPath("/app/boards/boardsWrite.jsp?type=1");
				break;
				//남편 게시판
			case "2":
				forward = new ActionForward();
				forward.setRedirect(false);
				forward.setPath("/app/boards/boardsWrite.jsp?type=2");
				break;
				//중고 게시판
			case "3":
				forward = new ActionForward();
				forward.setRedirect(false);
				forward.setPath("/app/boards/boardsWrite.jsp?type=3");
				break;		
			}
			break;
		case "/boards/BoardsWriteOk.bo"://글 작성 완료버튼
			switch ((Integer)req.getSession().getAttribute("type")) {
			//노하우 게시판
			case 1:
				try {forward = new KnowhowWriteAction().execute(req, resp);} catch (Exception e) {System.out.println(e);}
				break;
			//남편 게시판
			case 2:
				try {forward = new HusbandWriteAction().execute(req, resp);} catch (Exception e) {System.out.println(e);}
				break;
			//중고 게시판
			case 3:
				try {forward = new SecondhandWriteAction().execute(req, resp);} catch (Exception e) {System.out.println(e);}
				break;		
			}
			break;
		case "/boards/BoardsView.bo"://게시글 보기
			switch (req.getParameter("type")) {
			case "1"://노하우 게시판
				try {forward = new KnowhowViewAction().execute(req, resp);} catch (Exception e1) {System.out.println(e1);}
				break;
			case "2"://남편 게시판
				try {forward = new HusbandViewAction().execute(req, resp);} catch (Exception e1) {System.out.println(e1);}
				break;
			case "3"://중고 게시판
				try {forward = new SecondhandViewAction().execute(req, resp);} catch (Exception e1) {System.out.println(e1);}
				break;		
			}
			break;
		case "/boards/Fileupload.bo":
			try {forward = new Upload().execute(req, resp);} catch (Exception e) {System.out.println(e);}
			
			break;
		case "/boards/BoardsReplyWrite.bo"://댓글 작성
			switch (req.getParameter("type")) {
			case "1":
				try {forward = new knoreplyWriteOkAction().execute(req, resp);} catch (Exception e1) {System.out.println(e1);}
				break;
			case "2":
				try {forward = new HusreplyWriteOkAction().execute(req, resp);} catch (Exception e1) {System.out.println(e1);}
				break;
			case "3":
				try {forward = new SecreplyWriteOkAction().execute(req, resp);} catch (Exception e1) {System.out.println(e1);}
				break;
			}
			break;
		case "/boards/BoradsReplyDeleteOk.bo"://댓글 삭제
			switch (req.getParameter("type")) {
			case "1":
				try {forward = new knoreplyDeleteOkAction().execute(req, resp);} catch (Exception e1) {System.out.println(e1);}
				break;
			case "2":
				try {forward = new HusreplyDeleteOkAction().execute(req, resp);} catch (Exception e1) {System.out.println(e1);}
				break;
			case "3":
				try {forward = new SecreplyDeleteOkAction().execute(req, resp);} catch (Exception e1) {System.out.println(e1);}
				break;
			}
			break;
		case "/boards/BoardsReplyList.bo"://댓글 리스트 불러오기
			switch (req.getParameter("type")) {
			case "1"://노하우 게시판 댓글
				System.out.println(1);
				try {forward = new KnoreplyListAction().execute(req, resp);} catch (Exception e) {System.out.println(e);}
				break;
			case "2"://남편자랑 게시판 댓글
				try {forward = new HusreplyListAction().execute(req, resp);} catch (Exception e) {System.out.println(e);}
				break;
			case "3"://중고거래 게시판 댓글
				try {forward = new SecreplyListAction().execute(req, resp);} catch (Exception e) {System.out.println(e);}
				break;
			}
			break;
			}
		
			if(forward != null) {
				if(forward.isRedirect()) {
					resp.sendRedirect(forward.getPath());
				}else{
					RequestDispatcher dispatcher = req.getRequestDispatcher(forward.getPath());
					dispatcher.forward(req, resp);
				}
			}
		}
	}

